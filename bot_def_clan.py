# -*- coding: utf-8 -*-
import telebot
from telebot import types
import time
import ast
from string import Template


bot = telebot.TeleBot('TOKEN')

user_dict_id_main = {} # —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –∫ —Ç–µ–ª–µ–≥—Ä–∞–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ {–Ω–æ–º–µ—Ä —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è}
user_dict_time = {}    # —Å–ª–æ–≤–∞—Ä—å —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ –∫–æ—Ç–æ—Ä—ã–º —É–∂–µ –±—ã–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∞, –Ω—É–∂–µ–Ω –¥–ª—è –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –æ–ø–æ–≤–µ—â–µ–Ω–∏—è –ø–æ –∫–∞–∂–¥–æ–º—É —Å–æ–±—ã—Ç–∏—é

k = 0 # –≥–ª–æ–±–∞–ª—å–Ω–∞—è –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è —Å ‚Ññ —á–∞—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω—É–∂–Ω–∞ –≤ —Å–ª—É—á–∞–µ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è ex—Åept, —Ç.–∫. –µ—Å–ª–∏ –ø—ã—Ç–∞—Ç—å—Å—è –æ—Ç–æ—Å–ª–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∫–æ—Ç–æ—Ä—ã–π —É–¥–∞–ª–∏–ª —á–∞—Ç —Å –±–æ—Ç–æ–º, —Ç–æ –±—É–¥–µ—Ç —Å—ã–ø–∞—Ç—å—Å—è –æ—à–∏–±–∫–∞

with open('db.txt', "r") as file:
    time_dict = ast.literal_eval(file.readline())


# –µ—Å–ª–∏ /help, /start
@bot.message_handler(commands=['help', 'start'])
def send_welcome(message):
    try:
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
        itembtn1 = types.KeyboardButton('/–ò–Ω—Ñ–æ')
        itembtn2 = types.KeyboardButton('/–ù–∞—á–∞—Ç—å')
        markup.add(itembtn1, itembtn2)

        bot.send_message(message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ "
                         + message.from_user.first_name
                         + ", –≤—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>'/–ò–Ω—Ñ–æ'</b> - –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, –ª–∏–±–æ <b>'/–ù–∞—á–∞—Ç—å'</b> –≥–¥–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å ‚Ññ–∫–ª–∞–Ω–∞ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–∞–ø–∞–¥–µ–Ω–∏–π –Ω–∞ –ø—Ä–µ–¥–ø—Ä–∏—è—Ç–∏—è", reply_markup=markup, parse_mode='html')

    except Exception as e:
        bot.reply_to(message, '–£–ø—Å...!!, Error 1')


# /–ò–Ω—Ñ–æ
@bot.message_handler(commands=['–ò–Ω—Ñ–æ'])
def send_about(message):
    try:
        bot.send_message(message.chat.id,
                         "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π –±–æ—Ç –¥–ª—è –∏–≥—Ä—ã '–ì–µ—Ä–æ–∏ –≤–æ–π–Ω—ã –∏ –¥–µ–Ω–µ–≥' *v.0.1* \n"
                         "–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:\n"
                         "1) *–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞–Ω* - –º–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞–Ω –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è \n"
                         "2) ‚ùå *–í—ã—Ö–æ–¥* - –≤—ã–π—Ç–∏ –≤ –Ω–∞—á–∞–ª–æ –º–µ–Ω—é\n"
                         "–ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ —É–ª—É—á—à–µ–Ω–∏—é –±–æ—Ç–∞, —Ç–æ –ø–∏—à–∏—Ç–µ –Ω–∞ –ø–æ—á—Ç—É: \n"
                         "_heroeswm.telegram.bot@gmail.com_ \n"
                         "–°–∞–π—Ç: https://www.heroeswm-telegram-bot.ru", parse_mode='Markdown')
    except Exception as e:
        bot.reply_to(message, '–£–ø—Å...!!, Error 2')


# /–ù–∞—á–∞—Ç—å
@bot.message_handler(commands=["–ù–∞—á–∞—Ç—å"])
def user_reg(message):
    try:
        markup = types.ReplyKeyboardRemove(selective=False)
        msg = bot.send_message(message.chat.id, 'üõ° –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–≥–æ –∫–ª–∞–Ω–∞:', reply_markup=markup)
        bot.register_next_step_handler(msg, process_clan_step)
    except Exception as e:
        bot.reply_to(message, '–£–ø—Å...!!, Error 3')


def process_clan_step(message):

    if message.text.isdigit():
        if len(message.text) <= 5:
            chat_id = message.chat.id
            user_dict_id_main[chat_id] = message.text
            bot_button(message)
        else:
            bot.send_message(message.from_user.id, '–ù–µ—Ç —Ç–∞–∫–æ–≥–æ –∫–ª–∞–Ω–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É...')
            user_reg(message)
    else:
        bot.send_message(message.from_user.id, '–ù–æ–º–µ—Ä –∫–ª–∞–Ω–∞ –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å –∏–∑ —Ü–∏—Ñ—Ä')
        user_reg(message)


def bot_button(message):
    global user_dict_id_main, k, user_dict_time

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    item3 = types.KeyboardButton('–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞–Ω')
    item4 = types.KeyboardButton("‚ùå –í—ã—Ö–æ–¥")

    markup.add(item3, item4)

    if str(len(user_dict_id_main) % 10) in '1':
        temp_heroes = str(len(user_dict_id_main)) + ' –≥–µ—Ä–æ–π'

    elif str(len(user_dict_id_main) % 10) in '2, 3, 4':
        temp_heroes = str(len(user_dict_id_main)) + ' –≥–µ—Ä–æ—è'

    elif str(len(user_dict_id_main) % 10) in '0, 5, 6, 7, 8, 9':
        temp_heroes = str(len(user_dict_id_main)) + ' –≥–µ—Ä–æ–µ–≤'
    else:
        temp_heroes = str(len(user_dict_id_main)) + ' –≥–µ—Ä–æ–π'

    bot.send_message(message.chat.id,
                     "–°–µ–π—á–∞—Å <b>%s</b> –≤ —Å–µ—Ç–∏. –ü–æ–µ—Ö–∞–ª–∏..." % temp_heroes.format(
                         message.from_user, bot.get_me()),
                     parse_mode='html', reply_markup=markup)

    user_dict_id_main.update({message.chat.id: message.text})

    if len(user_dict_id_main) == 1: # –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –Ω–∞ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑, –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        while True:
            with open('db.txt', "r") as file:
                time_dict = ast.literal_eval(file.readline())

            user_dict_id = user_dict_id_main.copy()

            try:
                for u in user_dict_id: # –ø—Ä–æ–±–µ–≥–∞–µ–º—Å—è –ø–æ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ –±–æ—Ç—É
                    k = u
                    if user_dict_id[u] in time_dict:
                        if u not in user_dict_time:
                            user_dict_time[u] = time_dict[user_dict_id[u]]

                            for i in range(len(user_dict_time[u])):
                                b = list(user_dict_time[u][i].values())
                                if b == [0]:
                                    print(*user_dict_time[u][i].keys(), 'vs –°—É—Ä–≤–∏–ª—É—Ä–≥–∏')
                                    bot.send_message(u, str(*user_dict_time[u][i].keys()) + ' vs –°—É—Ä–≤–∏–ª—É—Ä–≥–∏')

                                else:
                                    count_attack = len(*user_dict_time[u][i].values())
                                    if count_attack == 1:
                                        print(*user_dict_time[u][i].keys(), 'vs', '#%s' % str(user_dict_time[u][i].values()).split("'")[1])
                                        bot.send_message(u, str(*user_dict_time[u][i].keys()) + ' vs ' + '‚öî*#%s*' % str(user_dict_time[u][i].values()).split("'")[1], parse_mode='Markdown')
                                    if count_attack == 2:
                                        print(*user_dict_time[u][i].keys(), 'vs', '#%s #%s' % (str(user_dict_time[u][i].values()).split("'")[1], str(user_dict_time[u][i].values()).split("'")[3]))
                                        bot.send_message(u, str(*user_dict_time[u][i].keys()) + ' vs ' + '‚öî*#%s* ‚öî*#%s*' % (str(user_dict_time[u][i].values()).split("'")[1], str(user_dict_time[u][i].values()).split("'")[3]), parse_mode='Markdown')
                                    if count_attack == 3:
                                        print(*user_dict_time[u][i].keys(), 'vs', '#%s #%s #%s' % (str(user_dict_time[u][i].values()).split("'")[1], str(user_dict_time[u][i].values()).split("'")[3], str(user_dict_time[u][i].values()).split("'")[5]))
                                        bot.send_message(u, str(*user_dict_time[u][i].keys()) + ' vs ' + '‚öî*#%s* ‚öî*#%s* ‚öî*#%s*' % (str(user_dict_time[u][i].values()).split("'")[1], str(user_dict_time[u][i].values()).split("'")[3], str(user_dict_time[u][i].values()).split("'")[5]), parse_mode='Markdown')

                        elif user_dict_time[u] == time_dict[user_dict_id[u]]:
                            # time.sleep(5)
                            continue

                        elif user_dict_time[u] != time_dict[user_dict_id[u]]:
                            for i in range(len(time_dict[user_dict_id[u]])):
                                if time_dict[user_dict_id[u]][i] not in user_dict_time[u]:
                                    b = list(time_dict[user_dict_id[u]][i].values())
                                    if b == [0]:
                                        print(*time_dict[user_dict_id[u]][i].keys(), 'vs –°—É—Ä–≤–∏–ª—É—Ä–≥–∏')
                                        bot.send_message(u, str(*time_dict[user_dict_id[u]][i].keys()) + ' vs –°—É—Ä–≤–∏–ª—É—Ä–≥–∏')

                                    else:
                                        count_attack = len(*time_dict[user_dict_id[u]][i].values())
                                        if count_attack == 1:
                                            print(*time_dict[user_dict_id[u]][i].keys(), 'vs',
                                                  '#%s' % str(time_dict[user_dict_id[u]][i].values()).split("'")[1])
                                            bot.send_message(u, str(*time_dict[user_dict_id[u]][i].keys()) + ' vs ' + '‚öî*#%s*' %
                                                             str(time_dict[user_dict_id[u]][i].values()).split("'")[1],
                                                             parse_mode='Markdown')
                                        if count_attack == 2:
                                            print(*time_dict[user_dict_id[u]][i].keys(), 'vs', '#%s #%s' % (
                                            str(time_dict[user_dict_id[u]][i].values()).split("'")[1],
                                            str(time_dict[user_dict_id[u]][i].values()).split("'")[3]))
                                            bot.send_message(u, str(
                                                *time_dict[user_dict_id[u]][i].keys()) + ' vs ' + '‚öî*#%s* ‚öî*#%s*' % (
                                                             str(time_dict[user_dict_id[u]][i].values()).split("'")[1],
                                                             str(time_dict[user_dict_id[u]][i].values()).split("'")[3]),
                                                             parse_mode='Markdown')
                                        if count_attack == 3:
                                            print(*time_dict[user_dict_id[u]][i].keys(), 'vs', '#%s #%s #%s' % (
                                            str(time_dict[user_dict_id[u]][i].values()).split("'")[1],
                                            str(time_dict[user_dict_id[u]][i].values()).split("'")[3],
                                            str(time_dict[user_dict_id[u]][i].values()).split("'")[5]))
                                            bot.send_message(u, str(
                                                *time_dict[user_dict_id[u]][i].keys()) + ' vs ' + '‚öî*#%s* ‚öî*#%s* ‚öî*#%s*' % (
                                                             str(time_dict[user_dict_id[u]][i].values()).split("'")[1],
                                                             str(time_dict[user_dict_id[u]][i].values()).split("'")[3],
                                                             str(time_dict[user_dict_id[u]][i].values()).split("'")[5]),
                                                             parse_mode='Markdown')

                            user_dict_time[u] = time_dict[user_dict_id[u]]
                time.sleep(5)

            except RuntimeError:
                print('RuntimeError')

            except telebot.apihelper.ApiException as e:
                if e.result.status_code == 403 or e.result.status_code == 400:
                    del user_dict_id[k]
                    del user_dict_time[k]


@bot.message_handler(content_types=['text'])
def content(message):

    if message.text == '–ò–∑–º–µ–Ω–∏—Ç—å –∫–ª–∞–Ω':
        if message.chat.id not in user_dict_id_main:
            process_clan_step(message)
        else:
            del user_dict_id_main[message.chat.id]
            process_clan_step(message)

    elif message.text == '‚ùå –í—ã—Ö–æ–¥':
        if message.chat.id not in user_dict_id_main:
            send_welcome(message)
        else:
            del user_dict_id_main[message.chat.id]
            send_welcome(message)
    else:
        bot.send_message(message.from_user.id, "–Ø –µ—â–µ –Ω–µ –∑–Ω–∞—é —Ç–∞–∫–æ–π –∫–æ–º–∞–Ω–¥—ã ‚òπ. –í–≤–µ–¥–∏—Ç–µ /help")


bot.polling(none_stop=True)